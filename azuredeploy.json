{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Label for the Storage Account where the Virtual Machine's disks will be placed."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "securityGroupName": {
      "type": "string",
      "defaultValue": "vmr-security",
      "metadata": {
        "description": "Security group defined to support VMR system level and default message vpn ports."
      }
    },
    "dnsLabelForLbIp": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Label for the Public IP used to access the Load Balancer."
      }
    },
    "dnsLabelForVmIp": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Label for the Public IP used to access the Virtual Machine(s)."
      }
    },
    "centOSVersion": {
      "type": "string",
      "defaultValue": "7.2",
      "metadata": {
        "description": "The Centos version for deploying the Docker containers. This will pick a fully patched image of this given Centos version. Allowed values: 7.2, 7.3"
      },
      "allowedValues": [
        "7.2",
        "7.3"
      ]
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the VM. Requires at lest 2 cores and 4GB of memory. Allowed values: DS2_V2, F2S"
      },
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_F2s"
      ]
    },
    "solaceVMR_URI": {
        "type": "string",
        "metadata": {
            "description": "The URI location of the Solace VMR Docker container tarball"
        }
    },
    "deploymentModel": {
      "type": "string",
      "metadata": {
          "description": "Deploy three node ha cluster or single node"
      },
      "allowedValues": [
        "HighAvailability",
        "SingleNode"
      ]
    }
  },
  "variables": {
    "availabilitySetName": "SolaceHACluster",
    "platformFaultDomainCount": "3",
    "platformUpdateDomainCount": "3",
    "imagePublisher": "OpenLogic",
    "imageOffer": "Centos",
    "OSDiskName": "osdiskfordockersimple",
    "nicName": "myVMNicD",
    "scriptUrl": "https://raw.githubusercontent.com/SolaceDev/solace-azure-quickstart-template/SOL-1257/",
    "sharedTemplatename": "shared-resources.json",
    "solaceInstallScriptName": "deploy_vmr.sh",
    "publicIPAddressName": "myPublicIPD",
    "publicIPAddressNameLB": "myLBPublicIPD",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountVHDsName": "vhds",
    "vmStorageAccountContainersName": "containers",
    "vmName": "SolaceVMR",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "nodeAddressPrefix": "10.0.0.10",
    "storageAccountType": "Standard_LRS",
    "subnetName": "Subnet",
    "virtualNetworkName": "MyVNETD",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "deploymentModelHighAvailability": {
      "numberOfNodes": 3
    },
    "deploymentModelSingleNode": { "numberOfNodes": 1 },
    "numberOfInstances": "[variables(concat('deploymentModel', parameters('deploymentModel'))).numberOfNodes]",
    "lbName" : "myLB",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "frontEndIPConfigName": "LoadBalancerFrontEnd",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/',variables('frontEndIPConfigName'))]",
    "lbPoolName": "vmr-ha-group",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/',variables('lbPoolName'))]",
    "lbProbeName": "vmr-ha-ad-health-check",
    "lbProbeID": "[concat(variables('lbID'),'/probes/',variables('lbProbeName'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "SolaceSecurity.Template",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('scriptUrl'), variables('sharedTemplatename'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "securityGroupName": {
            "value": "[parameters('securityGroupName')]"
          },
          "subnetPrefix": {
            "value": "[variables('subnetPrefix')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressNameLB')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsLabelForLbIp')]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "interfaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsLabelForVmIp'), copyindex())]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
          "addressSpace": {
          "addressPrefixes": [ "[variables('addressPrefix')]" ]
          },
          "subnets": [
              {
                  "name": "[variables('subnetName')]",
                  "properties": {
                      "addressPrefix": "[variables('subnetPrefix')]"
                  }
              }
          ]
        } 
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'), copyindex())]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('nodeAddressPrefix'), copyindex())]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyindex()))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('lbPoolID')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameLB'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontEndIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameLB'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('lbPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "ssh",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 2222,
              "backendPort": 2222,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "semp",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "smf",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 55555,
              "backendPort": 55555,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "smf-compressed",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 55003,
              "backendPort": 55003,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "smf-web",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "mqtt",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 1883,
              "backendPort": 1883,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "mqtt-web",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 8000,
              "backendPort": 8000,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "amqp",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 5672,
              "backendPort": 5672,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "rest",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 9000,
              "backendPort": 9000,
              "idleTimeoutInMinutes": 5,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeName')]",
            "properties": {
              "protocol": "http",
              "port": 5550,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "requestPath": "/health-check/guaranteed-active"
            }
          }
        ]
      }
    },
    {
      "name": "[parameters('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
          "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
          "platformUpdateDomainCount": "[variables('platformUpdateDomainCount')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', concat(variables('nicName'), copyindex()))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('centOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountVHDsName'),'/',variables('OSDiskName'),copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nicName'), copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), copyindex(), '/DockerExtension')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "DockerLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": { }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), copyindex(), '/configureVMRContainer')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "SolaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyindex(), '/extensions/DockerExtension')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[parameters('solaceVMR_URI')]",
            "[concat(variables('scriptUrl'), 'scripts/', variables('solaceInstallScriptName'))]",
            "[concat(variables('scriptUrl'), 'scripts/semp_query.sh')]"
          ],
          "commandToExecute": "[concat('bash ', variables('solaceInstallScriptName'), ' -c ', copyindex(), ' -i ', variables('nodeAddressPrefix'), ' -n ', variables('numberOfInstances'), ' -p ', parameters('adminPassword'))]"   
        } 
      }
    }
  ]
}